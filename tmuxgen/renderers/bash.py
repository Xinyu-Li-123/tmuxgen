# tmuxgen/renderers/bash.py
from __future__ import annotations
from typing import List
import shlex
from ..models import Config, SendAction, KeysAction, SleepAction, Window

def _emit_header() -> List[str]:
    return [
        "#!/bin/bash",
        "",
        "# Generated by tmuxgen â€“ sets up a tmux session per config",
        "# Tip: alias it, e.g., alias work='/path/to/generated.sh'",
        "",
    ]

def _emit_env(env: dict) -> List[str]:
    if not env:
        return []
    lines = ["# Environment variables for this workspace"]
    for k, v in env.items():
        lines.append(f"export {k}={shlex.quote(str(v))}")
    lines.append("")
    return lines

def _emit_new_session(session_name: str, first: Window) -> List[str]:
    return [
        "# Create a new detached session with the first window",
        f'tmux new-session -d -s {shlex.quote(session_name)} -c {shlex.quote(first.dir or "/")} -n {shlex.quote(first.name)}',
    ]

def _emit_new_window(session_name: str, w: Window) -> List[str]:
    return [
        f'# Create window: {w.name}',
        f'tmux new-window -t {shlex.quote(session_name)} -c {shlex.quote(w.dir or "/")} -n {shlex.quote(w.name)}',
    ]

def _emit_send_literal(session_name: str, win: str, text: str, enter: bool) -> List[str]:
    target = f"{session_name}:{win}"
    lines = [f'tmux send-keys -t {shlex.quote(target)} -l {shlex.quote(text)}']
    if enter:
        lines.append(f'tmux send-keys -t {shlex.quote(target)} Enter')
    return lines

def _emit_send_keys(session_name: str, win: str, seq: list[str], enter: bool) -> List[str]:
    target = f"{session_name}:{win}"
    args = " ".join(seq)  # tokens are passed raw to tmux
    lines = [f'tmux send-keys -t {shlex.quote(target)} {args}'] if args else []
    if enter:
        lines.append(f'tmux send-keys -t {shlex.quote(target)} Enter')
    return lines

def _emit_sleep(ms: int) -> List[str]:
    secs = max(0, ms) / 1000.0
    return [f"sleep {secs:.3f}"]

def _emit_actions(session_name: str, w: Window) -> List[str]:
    lines: List[str] = []
    if not w.actions:
        return lines
    lines.append(f"# Actions for window: {w.name}")
    for a in w.actions:
        if isinstance(a, SendAction):
            lines += _emit_send_literal(session_name, w.name, a.text, a.enter)
        elif isinstance(a, KeysAction):
            lines += _emit_send_keys(session_name, w.name, a.seq, a.enter)
        elif isinstance(a, SleepAction):
            lines += _emit_sleep(a.ms)
        else:
            lines.append(f'# Unknown action skipped in window {w.name}')
    return lines

def render_bash(cfg: Config) -> str:
    s = cfg.session
    windows = cfg.windows
    if not windows:
        raise ValueError("No windows to render")

    script: List[str] = []
    script += _emit_header()
    script.append(f"SESSION_NAME={shlex.quote(s.name)}")
    script.append(f"SESSION_PATH={shlex.quote(s.default_dir)}")
    script.append("")
    script += _emit_env(cfg.env)

    # First window creates the session
    script += _emit_new_session(s.name, windows[0])
    script.append("")
    script += _emit_actions(s.name, windows[0])

    # Remaining windows
    for w in windows[1:]:
        script.append("")
        script += _emit_new_window(s.name, w)
        script += _emit_actions(s.name, w)

    # Focus
    if s.focus_window:
        script.append("")
        script += [f'# Focus window: {s.focus_window}',
                   f'tmux select-window -t {shlex.quote(s.name)}:{shlex.quote(s.focus_window)}']

    # Attach
    if s.attach:
        script.append("")
        script += ["# Attach to session", f'tmux attach-session -t {shlex.quote(s.name)}']

    return "\n".join(script) + "\n"
